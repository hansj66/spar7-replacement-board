
spar7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a4c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a23  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000734  00000000  00000000  0000157f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000580  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000271f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000028f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1d 03 	call	0x63a	; 0x63a <main>
  8e:	0c 94 24 05 	jmp	0xa48	; 0xa48 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <InitPorts>:
const int DEBOUNCE = 5; // milliseconds(ish)
const int DEBOUNCE_HOPPER = 20;
const int SCAN_ATTEMPTS = 10;

void InitPorts()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2e 97       	sbiw	r28, 0x0e	; 14
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0x00;	// Input (switches)
  aa:	84 e2       	ldi	r24, 0x24	; 36
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1
	PORTB = 0xFF;	// Pull-ups
  b2:	85 e2       	ldi	r24, 0x25	; 37
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	DDRC = 0xFF;	// output (motor relay)
  bc:	87 e2       	ldi	r24, 0x27	; 39
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	DDRD = 0xFF;	// output (display)
  c6:	8a e2       	ldi	r24, 0x2A	; 42
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
	
	PORTD = 0;		
  d0:	8b e2       	ldi	r24, 0x2B	; 43
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	10 82       	st	Z, r1
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	a8 ec       	ldi	r26, 0xC8	; 200
  de:	b1 e4       	ldi	r27, 0x41	; 65
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	ab 83       	std	Y+3, r26	; 0x03
  e6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e4       	ldi	r19, 0x40	; 64
  ec:	4c e9       	ldi	r20, 0x9C	; 156
  ee:	55 e4       	ldi	r21, 0x45	; 69
  f0:	69 81       	ldd	r22, Y+1	; 0x01
  f2:	7a 81       	ldd	r23, Y+2	; 0x02
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	9c 81       	ldd	r25, Y+4	; 0x04
  f8:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
  fc:	dc 01       	movw	r26, r24
  fe:	cb 01       	movw	r24, r22
 100:	8d 83       	std	Y+5, r24	; 0x05
 102:	9e 83       	std	Y+6, r25	; 0x06
 104:	af 83       	std	Y+7, r26	; 0x07
 106:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e8       	ldi	r20, 0x80	; 128
 10e:	5f e3       	ldi	r21, 0x3F	; 63
 110:	6d 81       	ldd	r22, Y+5	; 0x05
 112:	7e 81       	ldd	r23, Y+6	; 0x06
 114:	8f 81       	ldd	r24, Y+7	; 0x07
 116:	98 85       	ldd	r25, Y+8	; 0x08
 118:	0e 94 cc 03 	call	0x798	; 0x798 <__cmpsf2>
 11c:	88 23       	and	r24, r24
 11e:	2c f4       	brge	.+10     	; 0x12a <InitPorts+0x94>
		__ticks = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	9a 87       	std	Y+10, r25	; 0x0a
 126:	89 87       	std	Y+9, r24	; 0x09
 128:	3f c0       	rjmp	.+126    	; 0x1a8 <InitPorts+0x112>
	else if (__tmp > 65535)
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	3f ef       	ldi	r19, 0xFF	; 255
 12e:	4f e7       	ldi	r20, 0x7F	; 127
 130:	57 e4       	ldi	r21, 0x47	; 71
 132:	6d 81       	ldd	r22, Y+5	; 0x05
 134:	7e 81       	ldd	r23, Y+6	; 0x06
 136:	8f 81       	ldd	r24, Y+7	; 0x07
 138:	98 85       	ldd	r25, Y+8	; 0x08
 13a:	0e 94 8a 04 	call	0x914	; 0x914 <__gesf2>
 13e:	18 16       	cp	r1, r24
 140:	4c f5       	brge	.+82     	; 0x194 <InitPorts+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	40 e2       	ldi	r20, 0x20	; 32
 148:	51 e4       	ldi	r21, 0x41	; 65
 14a:	69 81       	ldd	r22, Y+1	; 0x01
 14c:	7a 81       	ldd	r23, Y+2	; 0x02
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	9c 81       	ldd	r25, Y+4	; 0x04
 152:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
 156:	dc 01       	movw	r26, r24
 158:	cb 01       	movw	r24, r22
 15a:	bc 01       	movw	r22, r24
 15c:	cd 01       	movw	r24, r26
 15e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 162:	dc 01       	movw	r26, r24
 164:	cb 01       	movw	r24, r22
 166:	9a 87       	std	Y+10, r25	; 0x0a
 168:	89 87       	std	Y+9, r24	; 0x09
 16a:	0f c0       	rjmp	.+30     	; 0x18a <InitPorts+0xf4>
 16c:	84 ef       	ldi	r24, 0xF4	; 244
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	9c 87       	std	Y+12, r25	; 0x0c
 172:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 174:	8b 85       	ldd	r24, Y+11	; 0x0b
 176:	9c 85       	ldd	r25, Y+12	; 0x0c
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <InitPorts+0xe2>
 17c:	9c 87       	std	Y+12, r25	; 0x0c
 17e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 180:	89 85       	ldd	r24, Y+9	; 0x09
 182:	9a 85       	ldd	r25, Y+10	; 0x0a
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	9a 87       	std	Y+10, r25	; 0x0a
 188:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18a:	89 85       	ldd	r24, Y+9	; 0x09
 18c:	9a 85       	ldd	r25, Y+10	; 0x0a
 18e:	89 2b       	or	r24, r25
 190:	69 f7       	brne	.-38     	; 0x16c <InitPorts+0xd6>
	
	_delay_ms(25);
}
 192:	14 c0       	rjmp	.+40     	; 0x1bc <InitPorts+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 194:	6d 81       	ldd	r22, Y+5	; 0x05
 196:	7e 81       	ldd	r23, Y+6	; 0x06
 198:	8f 81       	ldd	r24, Y+7	; 0x07
 19a:	98 85       	ldd	r25, Y+8	; 0x08
 19c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 1a0:	dc 01       	movw	r26, r24
 1a2:	cb 01       	movw	r24, r22
 1a4:	9a 87       	std	Y+10, r25	; 0x0a
 1a6:	89 87       	std	Y+9, r24	; 0x09
 1a8:	89 85       	ldd	r24, Y+9	; 0x09
 1aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ac:	9e 87       	std	Y+14, r25	; 0x0e
 1ae:	8d 87       	std	Y+13, r24	; 0x0d
 1b0:	8d 85       	ldd	r24, Y+13	; 0x0d
 1b2:	9e 85       	ldd	r25, Y+14	; 0x0e
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <InitPorts+0x11e>
 1b8:	9e 87       	std	Y+14, r25	; 0x0e
 1ba:	8d 87       	std	Y+13, r24	; 0x0d
 1bc:	00 00       	nop
 1be:	2e 96       	adiw	r28, 0x0e	; 14
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <StartMotor>:

void StartMotor()
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
	PORTC |= 1;
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	28 e2       	ldi	r18, 0x28	; 40
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	21 60       	ori	r18, 0x01	; 1
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
}
 1ea:	00 00       	nop
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <StopMotor>:

void StopMotor()
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
	PORTC &= 11111110;
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	28 e2       	ldi	r18, 0x28	; 40
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	f9 01       	movw	r30, r18
 204:	20 81       	ld	r18, Z
 206:	26 7c       	andi	r18, 0xC6	; 198
 208:	fc 01       	movw	r30, r24
 20a:	20 83       	st	Z, r18
}
 20c:	00 00       	nop
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <DisplayCredit>:

void DisplayCredit(uint8_t value)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	00 d0       	rcall	.+0      	; 0x21a <DisplayCredit+0x6>
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t displayValue = value > 7 ? 7 : value;
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	88 30       	cpi	r24, 0x08	; 8
 224:	08 f0       	brcs	.+2      	; 0x228 <DisplayCredit+0x14>
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	89 83       	std	Y+1, r24	; 0x01
	
	displayValue ^= 0xFF;
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	80 95       	com	r24
 22e:	89 83       	std	Y+1, r24	; 0x01
	displayValue &= 0x0F;
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	8f 70       	andi	r24, 0x0F	; 15
 234:	89 83       	std	Y+1, r24	; 0x01
	
	PORTD = displayValue;
 236:	8b e2       	ldi	r24, 0x2B	; 43
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
}
 240:	00 00       	nop
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <RunHopper>:


void RunHopper(int credit)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	6f 97       	sbiw	r28, 0x1f	; 31
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	9f 8f       	std	Y+31, r25	; 0x1f
 262:	8e 8f       	std	Y+30, r24	; 0x1e
	StartMotor();
 264:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <StartMotor>
	uint8_t switch_array;
	while (1)
	{
		switch_array = PINB;
 268:	83 e2       	ldi	r24, 0x23	; 35
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	80 81       	ld	r24, Z
 270:	89 83       	std	Y+1, r24	; 0x01
		if (HOPPER(switch_array)) 
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	88 2f       	mov	r24, r24
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	81 70       	andi	r24, 0x01	; 1
 27a:	99 27       	eor	r25, r25
 27c:	89 2b       	or	r24, r25
 27e:	a1 f3       	breq	.-24     	; 0x268 <RunHopper+0x1c>
		{
			_delay_ms(DEBOUNCE_HOPPER); // Switch is mechanically closed. Wait until it stabilizes (Signal is inverse / NC)
 280:	84 e1       	ldi	r24, 0x14	; 20
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	09 2e       	mov	r0, r25
 286:	00 0c       	add	r0, r0
 288:	aa 0b       	sbc	r26, r26
 28a:	bb 0b       	sbc	r27, r27
 28c:	bc 01       	movw	r22, r24
 28e:	cd 01       	movw	r24, r26
 290:	0e 94 02 04 	call	0x804	; 0x804 <__floatsisf>
 294:	dc 01       	movw	r26, r24
 296:	cb 01       	movw	r24, r22
 298:	8e 83       	std	Y+6, r24	; 0x06
 29a:	9f 83       	std	Y+7, r25	; 0x07
 29c:	a8 87       	std	Y+8, r26	; 0x08
 29e:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e4       	ldi	r19, 0x40	; 64
 2a4:	4c e9       	ldi	r20, 0x9C	; 156
 2a6:	55 e4       	ldi	r21, 0x45	; 69
 2a8:	6e 81       	ldd	r22, Y+6	; 0x06
 2aa:	7f 81       	ldd	r23, Y+7	; 0x07
 2ac:	88 85       	ldd	r24, Y+8	; 0x08
 2ae:	99 85       	ldd	r25, Y+9	; 0x09
 2b0:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
 2b4:	dc 01       	movw	r26, r24
 2b6:	cb 01       	movw	r24, r22
 2b8:	8a 87       	std	Y+10, r24	; 0x0a
 2ba:	9b 87       	std	Y+11, r25	; 0x0b
 2bc:	ac 87       	std	Y+12, r26	; 0x0c
 2be:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	40 e8       	ldi	r20, 0x80	; 128
 2c6:	5f e3       	ldi	r21, 0x3F	; 63
 2c8:	6a 85       	ldd	r22, Y+10	; 0x0a
 2ca:	7b 85       	ldd	r23, Y+11	; 0x0b
 2cc:	8c 85       	ldd	r24, Y+12	; 0x0c
 2ce:	9d 85       	ldd	r25, Y+13	; 0x0d
 2d0:	0e 94 cc 03 	call	0x798	; 0x798 <__cmpsf2>
 2d4:	88 23       	and	r24, r24
 2d6:	2c f4       	brge	.+10     	; 0x2e2 <RunHopper+0x96>
		__ticks = 1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	9f 87       	std	Y+15, r25	; 0x0f
 2de:	8e 87       	std	Y+14, r24	; 0x0e
 2e0:	3f c0       	rjmp	.+126    	; 0x360 <RunHopper+0x114>
	else if (__tmp > 65535)
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	3f ef       	ldi	r19, 0xFF	; 255
 2e6:	4f e7       	ldi	r20, 0x7F	; 127
 2e8:	57 e4       	ldi	r21, 0x47	; 71
 2ea:	6a 85       	ldd	r22, Y+10	; 0x0a
 2ec:	7b 85       	ldd	r23, Y+11	; 0x0b
 2ee:	8c 85       	ldd	r24, Y+12	; 0x0c
 2f0:	9d 85       	ldd	r25, Y+13	; 0x0d
 2f2:	0e 94 8a 04 	call	0x914	; 0x914 <__gesf2>
 2f6:	18 16       	cp	r1, r24
 2f8:	4c f5       	brge	.+82     	; 0x34c <RunHopper+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	40 e2       	ldi	r20, 0x20	; 32
 300:	51 e4       	ldi	r21, 0x41	; 65
 302:	6e 81       	ldd	r22, Y+6	; 0x06
 304:	7f 81       	ldd	r23, Y+7	; 0x07
 306:	88 85       	ldd	r24, Y+8	; 0x08
 308:	99 85       	ldd	r25, Y+9	; 0x09
 30a:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
 30e:	dc 01       	movw	r26, r24
 310:	cb 01       	movw	r24, r22
 312:	bc 01       	movw	r22, r24
 314:	cd 01       	movw	r24, r26
 316:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 31a:	dc 01       	movw	r26, r24
 31c:	cb 01       	movw	r24, r22
 31e:	9f 87       	std	Y+15, r25	; 0x0f
 320:	8e 87       	std	Y+14, r24	; 0x0e
 322:	0f c0       	rjmp	.+30     	; 0x342 <RunHopper+0xf6>
 324:	84 ef       	ldi	r24, 0xF4	; 244
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	99 8b       	std	Y+17, r25	; 0x11
 32a:	88 8b       	std	Y+16, r24	; 0x10
 32c:	88 89       	ldd	r24, Y+16	; 0x10
 32e:	99 89       	ldd	r25, Y+17	; 0x11
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <RunHopper+0xe4>
 334:	99 8b       	std	Y+17, r25	; 0x11
 336:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 338:	8e 85       	ldd	r24, Y+14	; 0x0e
 33a:	9f 85       	ldd	r25, Y+15	; 0x0f
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	9f 87       	std	Y+15, r25	; 0x0f
 340:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 342:	8e 85       	ldd	r24, Y+14	; 0x0e
 344:	9f 85       	ldd	r25, Y+15	; 0x0f
 346:	89 2b       	or	r24, r25
 348:	69 f7       	brne	.-38     	; 0x324 <RunHopper+0xd8>
 34a:	14 c0       	rjmp	.+40     	; 0x374 <RunHopper+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 34c:	6a 85       	ldd	r22, Y+10	; 0x0a
 34e:	7b 85       	ldd	r23, Y+11	; 0x0b
 350:	8c 85       	ldd	r24, Y+12	; 0x0c
 352:	9d 85       	ldd	r25, Y+13	; 0x0d
 354:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 358:	dc 01       	movw	r26, r24
 35a:	cb 01       	movw	r24, r22
 35c:	9f 87       	std	Y+15, r25	; 0x0f
 35e:	8e 87       	std	Y+14, r24	; 0x0e
 360:	8e 85       	ldd	r24, Y+14	; 0x0e
 362:	9f 85       	ldd	r25, Y+15	; 0x0f
 364:	9b 8b       	std	Y+19, r25	; 0x13
 366:	8a 8b       	std	Y+18, r24	; 0x12
 368:	8a 89       	ldd	r24, Y+18	; 0x12
 36a:	9b 89       	ldd	r25, Y+19	; 0x13
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <RunHopper+0x120>
 370:	9b 8b       	std	Y+19, r25	; 0x13
 372:	8a 8b       	std	Y+18, r24	; 0x12
			while (1)
			{
				switch_array = PINB;
 374:	83 e2       	ldi	r24, 0x23	; 35
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	80 81       	ld	r24, Z
 37c:	89 83       	std	Y+1, r24	; 0x01
				if (!HOPPER(switch_array))  // Switch mechanically opens again. Wait until it stabilizes (Signal is inverse / NC)
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	88 2f       	mov	r24, r24
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	81 70       	andi	r24, 0x01	; 1
 386:	99 27       	eor	r25, r25
 388:	89 2b       	or	r24, r25
 38a:	a1 f7       	brne	.-24     	; 0x374 <RunHopper+0x128>
				{
					_delay_ms(DEBOUNCE_HOPPER);
 38c:	84 e1       	ldi	r24, 0x14	; 20
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	09 2e       	mov	r0, r25
 392:	00 0c       	add	r0, r0
 394:	aa 0b       	sbc	r26, r26
 396:	bb 0b       	sbc	r27, r27
 398:	bc 01       	movw	r22, r24
 39a:	cd 01       	movw	r24, r26
 39c:	0e 94 02 04 	call	0x804	; 0x804 <__floatsisf>
 3a0:	dc 01       	movw	r26, r24
 3a2:	cb 01       	movw	r24, r22
 3a4:	8a 83       	std	Y+2, r24	; 0x02
 3a6:	9b 83       	std	Y+3, r25	; 0x03
 3a8:	ac 83       	std	Y+4, r26	; 0x04
 3aa:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e4       	ldi	r19, 0x40	; 64
 3b0:	4c e9       	ldi	r20, 0x9C	; 156
 3b2:	55 e4       	ldi	r21, 0x45	; 69
 3b4:	6a 81       	ldd	r22, Y+2	; 0x02
 3b6:	7b 81       	ldd	r23, Y+3	; 0x03
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	9d 81       	ldd	r25, Y+5	; 0x05
 3bc:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
 3c0:	dc 01       	movw	r26, r24
 3c2:	cb 01       	movw	r24, r22
 3c4:	8c 8b       	std	Y+20, r24	; 0x14
 3c6:	9d 8b       	std	Y+21, r25	; 0x15
 3c8:	ae 8b       	std	Y+22, r26	; 0x16
 3ca:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e8       	ldi	r20, 0x80	; 128
 3d2:	5f e3       	ldi	r21, 0x3F	; 63
 3d4:	6c 89       	ldd	r22, Y+20	; 0x14
 3d6:	7d 89       	ldd	r23, Y+21	; 0x15
 3d8:	8e 89       	ldd	r24, Y+22	; 0x16
 3da:	9f 89       	ldd	r25, Y+23	; 0x17
 3dc:	0e 94 cc 03 	call	0x798	; 0x798 <__cmpsf2>
 3e0:	88 23       	and	r24, r24
 3e2:	2c f4       	brge	.+10     	; 0x3ee <RunHopper+0x1a2>
		__ticks = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	99 8f       	std	Y+25, r25	; 0x19
 3ea:	88 8f       	std	Y+24, r24	; 0x18
 3ec:	3f c0       	rjmp	.+126    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	else if (__tmp > 65535)
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	3f ef       	ldi	r19, 0xFF	; 255
 3f2:	4f e7       	ldi	r20, 0x7F	; 127
 3f4:	57 e4       	ldi	r21, 0x47	; 71
 3f6:	6c 89       	ldd	r22, Y+20	; 0x14
 3f8:	7d 89       	ldd	r23, Y+21	; 0x15
 3fa:	8e 89       	ldd	r24, Y+22	; 0x16
 3fc:	9f 89       	ldd	r25, Y+23	; 0x17
 3fe:	0e 94 8a 04 	call	0x914	; 0x914 <__gesf2>
 402:	18 16       	cp	r1, r24
 404:	4c f5       	brge	.+82     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	40 e2       	ldi	r20, 0x20	; 32
 40c:	51 e4       	ldi	r21, 0x41	; 65
 40e:	6a 81       	ldd	r22, Y+2	; 0x02
 410:	7b 81       	ldd	r23, Y+3	; 0x03
 412:	8c 81       	ldd	r24, Y+4	; 0x04
 414:	9d 81       	ldd	r25, Y+5	; 0x05
 416:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
 41a:	dc 01       	movw	r26, r24
 41c:	cb 01       	movw	r24, r22
 41e:	bc 01       	movw	r22, r24
 420:	cd 01       	movw	r24, r26
 422:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 426:	dc 01       	movw	r26, r24
 428:	cb 01       	movw	r24, r22
 42a:	99 8f       	std	Y+25, r25	; 0x19
 42c:	88 8f       	std	Y+24, r24	; 0x18
 42e:	0f c0       	rjmp	.+30     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 430:	84 ef       	ldi	r24, 0xF4	; 244
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	9b 8f       	std	Y+27, r25	; 0x1b
 436:	8a 8f       	std	Y+26, r24	; 0x1a
 438:	8a 8d       	ldd	r24, Y+26	; 0x1a
 43a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 440:	9b 8f       	std	Y+27, r25	; 0x1b
 442:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 444:	88 8d       	ldd	r24, Y+24	; 0x18
 446:	99 8d       	ldd	r25, Y+25	; 0x19
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	99 8f       	std	Y+25, r25	; 0x19
 44c:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 44e:	88 8d       	ldd	r24, Y+24	; 0x18
 450:	99 8d       	ldd	r25, Y+25	; 0x19
 452:	89 2b       	or	r24, r25
 454:	69 f7       	brne	.-38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 456:	14 c0       	rjmp	.+40     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 458:	6c 89       	ldd	r22, Y+20	; 0x14
 45a:	7d 89       	ldd	r23, Y+21	; 0x15
 45c:	8e 89       	ldd	r24, Y+22	; 0x16
 45e:	9f 89       	ldd	r25, Y+23	; 0x17
 460:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 464:	dc 01       	movw	r26, r24
 466:	cb 01       	movw	r24, r22
 468:	99 8f       	std	Y+25, r25	; 0x19
 46a:	88 8f       	std	Y+24, r24	; 0x18
 46c:	88 8d       	ldd	r24, Y+24	; 0x18
 46e:	99 8d       	ldd	r25, Y+25	; 0x19
 470:	9d 8f       	std	Y+29, r25	; 0x1d
 472:	8c 8f       	std	Y+28, r24	; 0x1c
 474:	8c 8d       	ldd	r24, Y+28	; 0x1c
 476:	9d 8d       	ldd	r25, Y+29	; 0x1d
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 47c:	9d 8f       	std	Y+29, r25	; 0x1d
 47e:	8c 8f       	std	Y+28, r24	; 0x1c
					if (credit > 0)
 480:	8e 8d       	ldd	r24, Y+30	; 0x1e
 482:	9f 8d       	ldd	r25, Y+31	; 0x1f
 484:	18 16       	cp	r1, r24
 486:	19 06       	cpc	r1, r25
 488:	2c f4       	brge	.+10     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
					{
						credit -= 1;
 48a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 48c:	9f 8d       	ldd	r25, Y+31	; 0x1f
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	9f 8f       	std	Y+31, r25	; 0x1f
 492:	8e 8f       	std	Y+30, r24	; 0x1e
					}				
					DisplayCredit(credit);
 494:	8e 8d       	ldd	r24, Y+30	; 0x1e
 496:	0e 94 0a 01 	call	0x214	; 0x214 <DisplayCredit>
					if (0 == credit)
 49a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 49c:	9f 8d       	ldd	r25, Y+31	; 0x1f
 49e:	89 2b       	or	r24, r25
 4a0:	19 f4       	brne	.+6      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
					{
						StopMotor();
 4a2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <StopMotor>
						return;
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
					}
					break;
 4a8:	00 00       	nop
				}				
			}
		}
	}
 4aa:	de ce       	rjmp	.-580    	; 0x268 <RunHopper+0x1c>
}
 4ac:	6f 96       	adiw	r28, 0x1f	; 31
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <ActiveSwitch>:


uint8_t ActiveSwitch()
{
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	61 97       	sbiw	r28, 0x11	; 17
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
	uint8_t switch_array;
	for (int i=0; i<SCAN_ATTEMPTS; i++) // 2,3 or 4 is already closed, or may be shortly. We know that the payout line (7) is already triggered
 4d2:	1a 82       	std	Y+2, r1	; 0x02
 4d4:	19 82       	std	Y+1, r1	; 0x01
 4d6:	9f c0       	rjmp	.+318    	; 0x616 <__stack+0x117>
	{
		_delay_ms(DEBOUNCE);
 4d8:	85 e0       	ldi	r24, 0x05	; 5
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	09 2e       	mov	r0, r25
 4de:	00 0c       	add	r0, r0
 4e0:	aa 0b       	sbc	r26, r26
 4e2:	bb 0b       	sbc	r27, r27
 4e4:	bc 01       	movw	r22, r24
 4e6:	cd 01       	movw	r24, r26
 4e8:	0e 94 02 04 	call	0x804	; 0x804 <__floatsisf>
 4ec:	dc 01       	movw	r26, r24
 4ee:	cb 01       	movw	r24, r22
 4f0:	8c 83       	std	Y+4, r24	; 0x04
 4f2:	9d 83       	std	Y+5, r25	; 0x05
 4f4:	ae 83       	std	Y+6, r26	; 0x06
 4f6:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	30 e4       	ldi	r19, 0x40	; 64
 4fc:	4c e9       	ldi	r20, 0x9C	; 156
 4fe:	55 e4       	ldi	r21, 0x45	; 69
 500:	6c 81       	ldd	r22, Y+4	; 0x04
 502:	7d 81       	ldd	r23, Y+5	; 0x05
 504:	8e 81       	ldd	r24, Y+6	; 0x06
 506:	9f 81       	ldd	r25, Y+7	; 0x07
 508:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
 50c:	dc 01       	movw	r26, r24
 50e:	cb 01       	movw	r24, r22
 510:	88 87       	std	Y+8, r24	; 0x08
 512:	99 87       	std	Y+9, r25	; 0x09
 514:	aa 87       	std	Y+10, r26	; 0x0a
 516:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	40 e8       	ldi	r20, 0x80	; 128
 51e:	5f e3       	ldi	r21, 0x3F	; 63
 520:	68 85       	ldd	r22, Y+8	; 0x08
 522:	79 85       	ldd	r23, Y+9	; 0x09
 524:	8a 85       	ldd	r24, Y+10	; 0x0a
 526:	9b 85       	ldd	r25, Y+11	; 0x0b
 528:	0e 94 cc 03 	call	0x798	; 0x798 <__cmpsf2>
 52c:	88 23       	and	r24, r24
 52e:	2c f4       	brge	.+10     	; 0x53a <__stack+0x3b>
		__ticks = 1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	9d 87       	std	Y+13, r25	; 0x0d
 536:	8c 87       	std	Y+12, r24	; 0x0c
 538:	3f c0       	rjmp	.+126    	; 0x5b8 <__stack+0xb9>
	else if (__tmp > 65535)
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	3f ef       	ldi	r19, 0xFF	; 255
 53e:	4f e7       	ldi	r20, 0x7F	; 127
 540:	57 e4       	ldi	r21, 0x47	; 71
 542:	68 85       	ldd	r22, Y+8	; 0x08
 544:	79 85       	ldd	r23, Y+9	; 0x09
 546:	8a 85       	ldd	r24, Y+10	; 0x0a
 548:	9b 85       	ldd	r25, Y+11	; 0x0b
 54a:	0e 94 8a 04 	call	0x914	; 0x914 <__gesf2>
 54e:	18 16       	cp	r1, r24
 550:	4c f5       	brge	.+82     	; 0x5a4 <__stack+0xa5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 552:	20 e0       	ldi	r18, 0x00	; 0
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	40 e2       	ldi	r20, 0x20	; 32
 558:	51 e4       	ldi	r21, 0x41	; 65
 55a:	6c 81       	ldd	r22, Y+4	; 0x04
 55c:	7d 81       	ldd	r23, Y+5	; 0x05
 55e:	8e 81       	ldd	r24, Y+6	; 0x06
 560:	9f 81       	ldd	r25, Y+7	; 0x07
 562:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
 566:	dc 01       	movw	r26, r24
 568:	cb 01       	movw	r24, r22
 56a:	bc 01       	movw	r22, r24
 56c:	cd 01       	movw	r24, r26
 56e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 572:	dc 01       	movw	r26, r24
 574:	cb 01       	movw	r24, r22
 576:	9d 87       	std	Y+13, r25	; 0x0d
 578:	8c 87       	std	Y+12, r24	; 0x0c
 57a:	0f c0       	rjmp	.+30     	; 0x59a <__stack+0x9b>
 57c:	84 ef       	ldi	r24, 0xF4	; 244
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	9f 87       	std	Y+15, r25	; 0x0f
 582:	8e 87       	std	Y+14, r24	; 0x0e
 584:	8e 85       	ldd	r24, Y+14	; 0x0e
 586:	9f 85       	ldd	r25, Y+15	; 0x0f
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <__stack+0x89>
 58c:	9f 87       	std	Y+15, r25	; 0x0f
 58e:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 590:	8c 85       	ldd	r24, Y+12	; 0x0c
 592:	9d 85       	ldd	r25, Y+13	; 0x0d
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	9d 87       	std	Y+13, r25	; 0x0d
 598:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 59a:	8c 85       	ldd	r24, Y+12	; 0x0c
 59c:	9d 85       	ldd	r25, Y+13	; 0x0d
 59e:	89 2b       	or	r24, r25
 5a0:	69 f7       	brne	.-38     	; 0x57c <__stack+0x7d>
 5a2:	14 c0       	rjmp	.+40     	; 0x5cc <__stack+0xcd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5a4:	68 85       	ldd	r22, Y+8	; 0x08
 5a6:	79 85       	ldd	r23, Y+9	; 0x09
 5a8:	8a 85       	ldd	r24, Y+10	; 0x0a
 5aa:	9b 85       	ldd	r25, Y+11	; 0x0b
 5ac:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 5b0:	dc 01       	movw	r26, r24
 5b2:	cb 01       	movw	r24, r22
 5b4:	9d 87       	std	Y+13, r25	; 0x0d
 5b6:	8c 87       	std	Y+12, r24	; 0x0c
 5b8:	8c 85       	ldd	r24, Y+12	; 0x0c
 5ba:	9d 85       	ldd	r25, Y+13	; 0x0d
 5bc:	99 8b       	std	Y+17, r25	; 0x11
 5be:	88 8b       	std	Y+16, r24	; 0x10
 5c0:	88 89       	ldd	r24, Y+16	; 0x10
 5c2:	99 89       	ldd	r25, Y+17	; 0x11
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <__stack+0xc5>
 5c8:	99 8b       	std	Y+17, r25	; 0x11
 5ca:	88 8b       	std	Y+16, r24	; 0x10
		switch_array = PINB;
 5cc:	83 e2       	ldi	r24, 0x23	; 35
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	8b 83       	std	Y+3, r24	; 0x03
		if (PAY2(switch_array))
 5d6:	8b 81       	ldd	r24, Y+3	; 0x03
 5d8:	88 2f       	mov	r24, r24
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	84 70       	andi	r24, 0x04	; 4
 5de:	99 27       	eor	r25, r25
 5e0:	89 2b       	or	r24, r25
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__stack+0xe9>
		{
			return 2;
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	20 c0       	rjmp	.+64     	; 0x628 <__stack+0x129>
		}
		else if (PAY3(switch_array))
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	88 2f       	mov	r24, r24
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	88 70       	andi	r24, 0x08	; 8
 5f0:	99 27       	eor	r25, r25
 5f2:	89 2b       	or	r24, r25
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__stack+0xfb>
		{
			return 3;
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	17 c0       	rjmp	.+46     	; 0x628 <__stack+0x129>
		}
		else if (PAY4(switch_array))
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	88 2f       	mov	r24, r24
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	80 71       	andi	r24, 0x10	; 16
 602:	99 27       	eor	r25, r25
 604:	89 2b       	or	r24, r25
 606:	11 f4       	brne	.+4      	; 0x60c <__stack+0x10d>
		{
			return 4;
 608:	84 e0       	ldi	r24, 0x04	; 4
 60a:	0e c0       	rjmp	.+28     	; 0x628 <__stack+0x129>


uint8_t ActiveSwitch()
{
	uint8_t switch_array;
	for (int i=0; i<SCAN_ATTEMPTS; i++) // 2,3 or 4 is already closed, or may be shortly. We know that the payout line (7) is already triggered
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	9a 81       	ldd	r25, Y+2	; 0x02
 610:	01 96       	adiw	r24, 0x01	; 1
 612:	9a 83       	std	Y+2, r25	; 0x02
 614:	89 83       	std	Y+1, r24	; 0x01
 616:	8a e0       	ldi	r24, 0x0A	; 10
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	29 81       	ldd	r18, Y+1	; 0x01
 61c:	3a 81       	ldd	r19, Y+2	; 0x02
 61e:	28 17       	cp	r18, r24
 620:	39 07       	cpc	r19, r25
 622:	0c f4       	brge	.+2      	; 0x626 <__stack+0x127>
 624:	59 cf       	rjmp	.-334    	; 0x4d8 <ActiveSwitch+0x1a>
		else if (PAY4(switch_array))
		{
			return 4;
		}
	}
	return 7;
 626:	87 e0       	ldi	r24, 0x07	; 7
}
 628:	61 96       	adiw	r28, 0x11	; 17
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <main>:

int main(void)
{
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
 642:	60 97       	sbiw	r28, 0x10	; 16
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	de bf       	out	0x3e, r29	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	cd bf       	out	0x3d, r28	; 61
	uint8_t switch_array;
	uint8_t credits;

	InitPorts();
 64e:	0e 94 4b 00 	call	0x96	; 0x96 <InitPorts>
	DisplayCredit(0);
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 0a 01 	call	0x214	; 0x214 <DisplayCredit>

	while (1)
	{
		credits = 0;
 658:	19 82       	std	Y+1, r1	; 0x01
		switch_array = PINB;
 65a:	83 e2       	ldi	r24, 0x23	; 35
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	fc 01       	movw	r30, r24
 660:	80 81       	ld	r24, Z
 662:	8a 83       	std	Y+2, r24	; 0x02
		
		if (PAYOUT(switch_array)) // Signal that a payout switch has been triggered, but we don't know which one yet.
 664:	8a 81       	ldd	r24, Y+2	; 0x02
 666:	88 2f       	mov	r24, r24
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	80 72       	andi	r24, 0x20	; 32
 66c:	99 27       	eor	r25, r25
 66e:	89 2b       	or	r24, r25
 670:	99 f3       	breq	.-26     	; 0x658 <main+0x1e>
		{
			_delay_ms(DEBOUNCE);
 672:	85 e0       	ldi	r24, 0x05	; 5
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	09 2e       	mov	r0, r25
 678:	00 0c       	add	r0, r0
 67a:	aa 0b       	sbc	r26, r26
 67c:	bb 0b       	sbc	r27, r27
 67e:	bc 01       	movw	r22, r24
 680:	cd 01       	movw	r24, r26
 682:	0e 94 02 04 	call	0x804	; 0x804 <__floatsisf>
 686:	dc 01       	movw	r26, r24
 688:	cb 01       	movw	r24, r22
 68a:	8b 83       	std	Y+3, r24	; 0x03
 68c:	9c 83       	std	Y+4, r25	; 0x04
 68e:	ad 83       	std	Y+5, r26	; 0x05
 690:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	30 e4       	ldi	r19, 0x40	; 64
 696:	4c e9       	ldi	r20, 0x9C	; 156
 698:	55 e4       	ldi	r21, 0x45	; 69
 69a:	6b 81       	ldd	r22, Y+3	; 0x03
 69c:	7c 81       	ldd	r23, Y+4	; 0x04
 69e:	8d 81       	ldd	r24, Y+5	; 0x05
 6a0:	9e 81       	ldd	r25, Y+6	; 0x06
 6a2:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
 6a6:	dc 01       	movw	r26, r24
 6a8:	cb 01       	movw	r24, r22
 6aa:	8f 83       	std	Y+7, r24	; 0x07
 6ac:	98 87       	std	Y+8, r25	; 0x08
 6ae:	a9 87       	std	Y+9, r26	; 0x09
 6b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	40 e8       	ldi	r20, 0x80	; 128
 6b8:	5f e3       	ldi	r21, 0x3F	; 63
 6ba:	6f 81       	ldd	r22, Y+7	; 0x07
 6bc:	78 85       	ldd	r23, Y+8	; 0x08
 6be:	89 85       	ldd	r24, Y+9	; 0x09
 6c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 6c2:	0e 94 cc 03 	call	0x798	; 0x798 <__cmpsf2>
 6c6:	88 23       	and	r24, r24
 6c8:	2c f4       	brge	.+10     	; 0x6d4 <main+0x9a>
		__ticks = 1;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	9c 87       	std	Y+12, r25	; 0x0c
 6d0:	8b 87       	std	Y+11, r24	; 0x0b
 6d2:	3f c0       	rjmp	.+126    	; 0x752 <main+0x118>
	else if (__tmp > 65535)
 6d4:	20 e0       	ldi	r18, 0x00	; 0
 6d6:	3f ef       	ldi	r19, 0xFF	; 255
 6d8:	4f e7       	ldi	r20, 0x7F	; 127
 6da:	57 e4       	ldi	r21, 0x47	; 71
 6dc:	6f 81       	ldd	r22, Y+7	; 0x07
 6de:	78 85       	ldd	r23, Y+8	; 0x08
 6e0:	89 85       	ldd	r24, Y+9	; 0x09
 6e2:	9a 85       	ldd	r25, Y+10	; 0x0a
 6e4:	0e 94 8a 04 	call	0x914	; 0x914 <__gesf2>
 6e8:	18 16       	cp	r1, r24
 6ea:	4c f5       	brge	.+82     	; 0x73e <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	40 e2       	ldi	r20, 0x20	; 32
 6f2:	51 e4       	ldi	r21, 0x41	; 65
 6f4:	6b 81       	ldd	r22, Y+3	; 0x03
 6f6:	7c 81       	ldd	r23, Y+4	; 0x04
 6f8:	8d 81       	ldd	r24, Y+5	; 0x05
 6fa:	9e 81       	ldd	r25, Y+6	; 0x06
 6fc:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3>
 700:	dc 01       	movw	r26, r24
 702:	cb 01       	movw	r24, r22
 704:	bc 01       	movw	r22, r24
 706:	cd 01       	movw	r24, r26
 708:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 70c:	dc 01       	movw	r26, r24
 70e:	cb 01       	movw	r24, r22
 710:	9c 87       	std	Y+12, r25	; 0x0c
 712:	8b 87       	std	Y+11, r24	; 0x0b
 714:	0f c0       	rjmp	.+30     	; 0x734 <main+0xfa>
 716:	84 ef       	ldi	r24, 0xF4	; 244
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	9e 87       	std	Y+14, r25	; 0x0e
 71c:	8d 87       	std	Y+13, r24	; 0x0d
 71e:	8d 85       	ldd	r24, Y+13	; 0x0d
 720:	9e 85       	ldd	r25, Y+14	; 0x0e
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <main+0xe8>
 726:	9e 87       	std	Y+14, r25	; 0x0e
 728:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 72a:	8b 85       	ldd	r24, Y+11	; 0x0b
 72c:	9c 85       	ldd	r25, Y+12	; 0x0c
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	9c 87       	std	Y+12, r25	; 0x0c
 732:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 734:	8b 85       	ldd	r24, Y+11	; 0x0b
 736:	9c 85       	ldd	r25, Y+12	; 0x0c
 738:	89 2b       	or	r24, r25
 73a:	69 f7       	brne	.-38     	; 0x716 <main+0xdc>
 73c:	14 c0       	rjmp	.+40     	; 0x766 <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 73e:	6f 81       	ldd	r22, Y+7	; 0x07
 740:	78 85       	ldd	r23, Y+8	; 0x08
 742:	89 85       	ldd	r24, Y+9	; 0x09
 744:	9a 85       	ldd	r25, Y+10	; 0x0a
 746:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
 74a:	dc 01       	movw	r26, r24
 74c:	cb 01       	movw	r24, r22
 74e:	9c 87       	std	Y+12, r25	; 0x0c
 750:	8b 87       	std	Y+11, r24	; 0x0b
 752:	8b 85       	ldd	r24, Y+11	; 0x0b
 754:	9c 85       	ldd	r25, Y+12	; 0x0c
 756:	98 8b       	std	Y+16, r25	; 0x10
 758:	8f 87       	std	Y+15, r24	; 0x0f
 75a:	8f 85       	ldd	r24, Y+15	; 0x0f
 75c:	98 89       	ldd	r25, Y+16	; 0x10
 75e:	01 97       	sbiw	r24, 0x01	; 1
 760:	f1 f7       	brne	.-4      	; 0x75e <main+0x124>
 762:	98 8b       	std	Y+16, r25	; 0x10
 764:	8f 87       	std	Y+15, r24	; 0x0f
			switch_array = PINB;
 766:	83 e2       	ldi	r24, 0x23	; 35
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	fc 01       	movw	r30, r24
 76c:	80 81       	ld	r24, Z
 76e:	8a 83       	std	Y+2, r24	; 0x02
			if (PAYOUT(switch_array))
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	88 2f       	mov	r24, r24
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	80 72       	andi	r24, 0x20	; 32
 778:	99 27       	eor	r25, r25
 77a:	89 2b       	or	r24, r25
 77c:	09 f4       	brne	.+2      	; 0x780 <main+0x146>
 77e:	6c cf       	rjmp	.-296    	; 0x658 <main+0x1e>
			{
				credits = ActiveSwitch();
 780:	0e 94 5f 02 	call	0x4be	; 0x4be <ActiveSwitch>
 784:	89 83       	std	Y+1, r24	; 0x01
				DisplayCredit(credits);
 786:	89 81       	ldd	r24, Y+1	; 0x01
 788:	0e 94 0a 01 	call	0x214	; 0x214 <DisplayCredit>
				RunHopper(credits);
 78c:	89 81       	ldd	r24, Y+1	; 0x01
 78e:	88 2f       	mov	r24, r24
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 26 01 	call	0x24c	; 0x24c <RunHopper>
			}
		}
	}
 796:	60 cf       	rjmp	.-320    	; 0x658 <main+0x1e>

00000798 <__cmpsf2>:
 798:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_cmp>
 79c:	08 f4       	brcc	.+2      	; 0x7a0 <__cmpsf2+0x8>
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	08 95       	ret

000007a2 <__fixunssfsi>:
 7a2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_splitA>
 7a6:	88 f0       	brcs	.+34     	; 0x7ca <__fixunssfsi+0x28>
 7a8:	9f 57       	subi	r25, 0x7F	; 127
 7aa:	98 f0       	brcs	.+38     	; 0x7d2 <__fixunssfsi+0x30>
 7ac:	b9 2f       	mov	r27, r25
 7ae:	99 27       	eor	r25, r25
 7b0:	b7 51       	subi	r27, 0x17	; 23
 7b2:	b0 f0       	brcs	.+44     	; 0x7e0 <__fixunssfsi+0x3e>
 7b4:	e1 f0       	breq	.+56     	; 0x7ee <__fixunssfsi+0x4c>
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	1a f0       	brmi	.+6      	; 0x7c6 <__fixunssfsi+0x24>
 7c0:	ba 95       	dec	r27
 7c2:	c9 f7       	brne	.-14     	; 0x7b6 <__fixunssfsi+0x14>
 7c4:	14 c0       	rjmp	.+40     	; 0x7ee <__fixunssfsi+0x4c>
 7c6:	b1 30       	cpi	r27, 0x01	; 1
 7c8:	91 f0       	breq	.+36     	; 0x7ee <__fixunssfsi+0x4c>
 7ca:	0e 94 83 04 	call	0x906	; 0x906 <__fp_zero>
 7ce:	b1 e0       	ldi	r27, 0x01	; 1
 7d0:	08 95       	ret
 7d2:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_zero>
 7d6:	67 2f       	mov	r22, r23
 7d8:	78 2f       	mov	r23, r24
 7da:	88 27       	eor	r24, r24
 7dc:	b8 5f       	subi	r27, 0xF8	; 248
 7de:	39 f0       	breq	.+14     	; 0x7ee <__fixunssfsi+0x4c>
 7e0:	b9 3f       	cpi	r27, 0xF9	; 249
 7e2:	cc f3       	brlt	.-14     	; 0x7d6 <__fixunssfsi+0x34>
 7e4:	86 95       	lsr	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b3 95       	inc	r27
 7ec:	d9 f7       	brne	.-10     	; 0x7e4 <__fixunssfsi+0x42>
 7ee:	3e f4       	brtc	.+14     	; 0x7fe <__fixunssfsi+0x5c>
 7f0:	90 95       	com	r25
 7f2:	80 95       	com	r24
 7f4:	70 95       	com	r23
 7f6:	61 95       	neg	r22
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	8f 4f       	sbci	r24, 0xFF	; 255
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	08 95       	ret

00000800 <__floatunsisf>:
 800:	e8 94       	clt
 802:	09 c0       	rjmp	.+18     	; 0x816 <__floatsisf+0x12>

00000804 <__floatsisf>:
 804:	97 fb       	bst	r25, 7
 806:	3e f4       	brtc	.+14     	; 0x816 <__floatsisf+0x12>
 808:	90 95       	com	r25
 80a:	80 95       	com	r24
 80c:	70 95       	com	r23
 80e:	61 95       	neg	r22
 810:	7f 4f       	sbci	r23, 0xFF	; 255
 812:	8f 4f       	sbci	r24, 0xFF	; 255
 814:	9f 4f       	sbci	r25, 0xFF	; 255
 816:	99 23       	and	r25, r25
 818:	a9 f0       	breq	.+42     	; 0x844 <__floatsisf+0x40>
 81a:	f9 2f       	mov	r31, r25
 81c:	96 e9       	ldi	r25, 0x96	; 150
 81e:	bb 27       	eor	r27, r27
 820:	93 95       	inc	r25
 822:	f6 95       	lsr	r31
 824:	87 95       	ror	r24
 826:	77 95       	ror	r23
 828:	67 95       	ror	r22
 82a:	b7 95       	ror	r27
 82c:	f1 11       	cpse	r31, r1
 82e:	f8 cf       	rjmp	.-16     	; 0x820 <__floatsisf+0x1c>
 830:	fa f4       	brpl	.+62     	; 0x870 <__floatsisf+0x6c>
 832:	bb 0f       	add	r27, r27
 834:	11 f4       	brne	.+4      	; 0x83a <__floatsisf+0x36>
 836:	60 ff       	sbrs	r22, 0
 838:	1b c0       	rjmp	.+54     	; 0x870 <__floatsisf+0x6c>
 83a:	6f 5f       	subi	r22, 0xFF	; 255
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	16 c0       	rjmp	.+44     	; 0x870 <__floatsisf+0x6c>
 844:	88 23       	and	r24, r24
 846:	11 f0       	breq	.+4      	; 0x84c <__floatsisf+0x48>
 848:	96 e9       	ldi	r25, 0x96	; 150
 84a:	11 c0       	rjmp	.+34     	; 0x86e <__floatsisf+0x6a>
 84c:	77 23       	and	r23, r23
 84e:	21 f0       	breq	.+8      	; 0x858 <__floatsisf+0x54>
 850:	9e e8       	ldi	r25, 0x8E	; 142
 852:	87 2f       	mov	r24, r23
 854:	76 2f       	mov	r23, r22
 856:	05 c0       	rjmp	.+10     	; 0x862 <__floatsisf+0x5e>
 858:	66 23       	and	r22, r22
 85a:	71 f0       	breq	.+28     	; 0x878 <__floatsisf+0x74>
 85c:	96 e8       	ldi	r25, 0x86	; 134
 85e:	86 2f       	mov	r24, r22
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	2a f0       	brmi	.+10     	; 0x870 <__floatsisf+0x6c>
 866:	9a 95       	dec	r25
 868:	66 0f       	add	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	da f7       	brpl	.-10     	; 0x866 <__floatsisf+0x62>
 870:	88 0f       	add	r24, r24
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <__fp_cmp>:
 87a:	99 0f       	add	r25, r25
 87c:	00 08       	sbc	r0, r0
 87e:	55 0f       	add	r21, r21
 880:	aa 0b       	sbc	r26, r26
 882:	e0 e8       	ldi	r30, 0x80	; 128
 884:	fe ef       	ldi	r31, 0xFE	; 254
 886:	16 16       	cp	r1, r22
 888:	17 06       	cpc	r1, r23
 88a:	e8 07       	cpc	r30, r24
 88c:	f9 07       	cpc	r31, r25
 88e:	c0 f0       	brcs	.+48     	; 0x8c0 <__fp_cmp+0x46>
 890:	12 16       	cp	r1, r18
 892:	13 06       	cpc	r1, r19
 894:	e4 07       	cpc	r30, r20
 896:	f5 07       	cpc	r31, r21
 898:	98 f0       	brcs	.+38     	; 0x8c0 <__fp_cmp+0x46>
 89a:	62 1b       	sub	r22, r18
 89c:	73 0b       	sbc	r23, r19
 89e:	84 0b       	sbc	r24, r20
 8a0:	95 0b       	sbc	r25, r21
 8a2:	39 f4       	brne	.+14     	; 0x8b2 <__fp_cmp+0x38>
 8a4:	0a 26       	eor	r0, r26
 8a6:	61 f0       	breq	.+24     	; 0x8c0 <__fp_cmp+0x46>
 8a8:	23 2b       	or	r18, r19
 8aa:	24 2b       	or	r18, r20
 8ac:	25 2b       	or	r18, r21
 8ae:	21 f4       	brne	.+8      	; 0x8b8 <__fp_cmp+0x3e>
 8b0:	08 95       	ret
 8b2:	0a 26       	eor	r0, r26
 8b4:	09 f4       	brne	.+2      	; 0x8b8 <__fp_cmp+0x3e>
 8b6:	a1 40       	sbci	r26, 0x01	; 1
 8b8:	a6 95       	lsr	r26
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	81 1d       	adc	r24, r1
 8be:	81 1d       	adc	r24, r1
 8c0:	08 95       	ret

000008c2 <__fp_split3>:
 8c2:	57 fd       	sbrc	r21, 7
 8c4:	90 58       	subi	r25, 0x80	; 128
 8c6:	44 0f       	add	r20, r20
 8c8:	55 1f       	adc	r21, r21
 8ca:	59 f0       	breq	.+22     	; 0x8e2 <__fp_splitA+0x10>
 8cc:	5f 3f       	cpi	r21, 0xFF	; 255
 8ce:	71 f0       	breq	.+28     	; 0x8ec <__fp_splitA+0x1a>
 8d0:	47 95       	ror	r20

000008d2 <__fp_splitA>:
 8d2:	88 0f       	add	r24, r24
 8d4:	97 fb       	bst	r25, 7
 8d6:	99 1f       	adc	r25, r25
 8d8:	61 f0       	breq	.+24     	; 0x8f2 <__fp_splitA+0x20>
 8da:	9f 3f       	cpi	r25, 0xFF	; 255
 8dc:	79 f0       	breq	.+30     	; 0x8fc <__fp_splitA+0x2a>
 8de:	87 95       	ror	r24
 8e0:	08 95       	ret
 8e2:	12 16       	cp	r1, r18
 8e4:	13 06       	cpc	r1, r19
 8e6:	14 06       	cpc	r1, r20
 8e8:	55 1f       	adc	r21, r21
 8ea:	f2 cf       	rjmp	.-28     	; 0x8d0 <__fp_split3+0xe>
 8ec:	46 95       	lsr	r20
 8ee:	f1 df       	rcall	.-30     	; 0x8d2 <__fp_splitA>
 8f0:	08 c0       	rjmp	.+16     	; 0x902 <__fp_splitA+0x30>
 8f2:	16 16       	cp	r1, r22
 8f4:	17 06       	cpc	r1, r23
 8f6:	18 06       	cpc	r1, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	f1 cf       	rjmp	.-30     	; 0x8de <__fp_splitA+0xc>
 8fc:	86 95       	lsr	r24
 8fe:	71 05       	cpc	r23, r1
 900:	61 05       	cpc	r22, r1
 902:	08 94       	sec
 904:	08 95       	ret

00000906 <__fp_zero>:
 906:	e8 94       	clt

00000908 <__fp_szero>:
 908:	bb 27       	eor	r27, r27
 90a:	66 27       	eor	r22, r22
 90c:	77 27       	eor	r23, r23
 90e:	cb 01       	movw	r24, r22
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret

00000914 <__gesf2>:
 914:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_cmp>
 918:	08 f4       	brcc	.+2      	; 0x91c <__gesf2+0x8>
 91a:	8f ef       	ldi	r24, 0xFF	; 255
 91c:	08 95       	ret

0000091e <__mulsf3>:
 91e:	0e 94 a2 04 	call	0x944	; 0x944 <__mulsf3x>
 922:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_round>
 926:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fp_pscA>
 92a:	38 f0       	brcs	.+14     	; 0x93a <__mulsf3+0x1c>
 92c:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_pscB>
 930:	20 f0       	brcs	.+8      	; 0x93a <__mulsf3+0x1c>
 932:	95 23       	and	r25, r21
 934:	11 f0       	breq	.+4      	; 0x93a <__mulsf3+0x1c>
 936:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>
 93a:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_nan>
 93e:	11 24       	eor	r1, r1
 940:	0c 94 84 04 	jmp	0x908	; 0x908 <__fp_szero>

00000944 <__mulsf3x>:
 944:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_split3>
 948:	70 f3       	brcs	.-36     	; 0x926 <__mulsf3+0x8>

0000094a <__mulsf3_pse>:
 94a:	95 9f       	mul	r25, r21
 94c:	c1 f3       	breq	.-16     	; 0x93e <__mulsf3+0x20>
 94e:	95 0f       	add	r25, r21
 950:	50 e0       	ldi	r21, 0x00	; 0
 952:	55 1f       	adc	r21, r21
 954:	62 9f       	mul	r22, r18
 956:	f0 01       	movw	r30, r0
 958:	72 9f       	mul	r23, r18
 95a:	bb 27       	eor	r27, r27
 95c:	f0 0d       	add	r31, r0
 95e:	b1 1d       	adc	r27, r1
 960:	63 9f       	mul	r22, r19
 962:	aa 27       	eor	r26, r26
 964:	f0 0d       	add	r31, r0
 966:	b1 1d       	adc	r27, r1
 968:	aa 1f       	adc	r26, r26
 96a:	64 9f       	mul	r22, r20
 96c:	66 27       	eor	r22, r22
 96e:	b0 0d       	add	r27, r0
 970:	a1 1d       	adc	r26, r1
 972:	66 1f       	adc	r22, r22
 974:	82 9f       	mul	r24, r18
 976:	22 27       	eor	r18, r18
 978:	b0 0d       	add	r27, r0
 97a:	a1 1d       	adc	r26, r1
 97c:	62 1f       	adc	r22, r18
 97e:	73 9f       	mul	r23, r19
 980:	b0 0d       	add	r27, r0
 982:	a1 1d       	adc	r26, r1
 984:	62 1f       	adc	r22, r18
 986:	83 9f       	mul	r24, r19
 988:	a0 0d       	add	r26, r0
 98a:	61 1d       	adc	r22, r1
 98c:	22 1f       	adc	r18, r18
 98e:	74 9f       	mul	r23, r20
 990:	33 27       	eor	r19, r19
 992:	a0 0d       	add	r26, r0
 994:	61 1d       	adc	r22, r1
 996:	23 1f       	adc	r18, r19
 998:	84 9f       	mul	r24, r20
 99a:	60 0d       	add	r22, r0
 99c:	21 1d       	adc	r18, r1
 99e:	82 2f       	mov	r24, r18
 9a0:	76 2f       	mov	r23, r22
 9a2:	6a 2f       	mov	r22, r26
 9a4:	11 24       	eor	r1, r1
 9a6:	9f 57       	subi	r25, 0x7F	; 127
 9a8:	50 40       	sbci	r21, 0x00	; 0
 9aa:	9a f0       	brmi	.+38     	; 0x9d2 <__mulsf3_pse+0x88>
 9ac:	f1 f0       	breq	.+60     	; 0x9ea <__mulsf3_pse+0xa0>
 9ae:	88 23       	and	r24, r24
 9b0:	4a f0       	brmi	.+18     	; 0x9c4 <__mulsf3_pse+0x7a>
 9b2:	ee 0f       	add	r30, r30
 9b4:	ff 1f       	adc	r31, r31
 9b6:	bb 1f       	adc	r27, r27
 9b8:	66 1f       	adc	r22, r22
 9ba:	77 1f       	adc	r23, r23
 9bc:	88 1f       	adc	r24, r24
 9be:	91 50       	subi	r25, 0x01	; 1
 9c0:	50 40       	sbci	r21, 0x00	; 0
 9c2:	a9 f7       	brne	.-22     	; 0x9ae <__mulsf3_pse+0x64>
 9c4:	9e 3f       	cpi	r25, 0xFE	; 254
 9c6:	51 05       	cpc	r21, r1
 9c8:	80 f0       	brcs	.+32     	; 0x9ea <__mulsf3_pse+0xa0>
 9ca:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_inf>
 9ce:	0c 94 84 04 	jmp	0x908	; 0x908 <__fp_szero>
 9d2:	5f 3f       	cpi	r21, 0xFF	; 255
 9d4:	e4 f3       	brlt	.-8      	; 0x9ce <__mulsf3_pse+0x84>
 9d6:	98 3e       	cpi	r25, 0xE8	; 232
 9d8:	d4 f3       	brlt	.-12     	; 0x9ce <__mulsf3_pse+0x84>
 9da:	86 95       	lsr	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b7 95       	ror	r27
 9e2:	f7 95       	ror	r31
 9e4:	e7 95       	ror	r30
 9e6:	9f 5f       	subi	r25, 0xFF	; 255
 9e8:	c1 f7       	brne	.-16     	; 0x9da <__mulsf3_pse+0x90>
 9ea:	fe 2b       	or	r31, r30
 9ec:	88 0f       	add	r24, r24
 9ee:	91 1d       	adc	r25, r1
 9f0:	96 95       	lsr	r25
 9f2:	87 95       	ror	r24
 9f4:	97 f9       	bld	r25, 7
 9f6:	08 95       	ret

000009f8 <__fp_inf>:
 9f8:	97 f9       	bld	r25, 7
 9fa:	9f 67       	ori	r25, 0x7F	; 127
 9fc:	80 e8       	ldi	r24, 0x80	; 128
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	08 95       	ret

00000a04 <__fp_nan>:
 a04:	9f ef       	ldi	r25, 0xFF	; 255
 a06:	80 ec       	ldi	r24, 0xC0	; 192
 a08:	08 95       	ret

00000a0a <__fp_pscA>:
 a0a:	00 24       	eor	r0, r0
 a0c:	0a 94       	dec	r0
 a0e:	16 16       	cp	r1, r22
 a10:	17 06       	cpc	r1, r23
 a12:	18 06       	cpc	r1, r24
 a14:	09 06       	cpc	r0, r25
 a16:	08 95       	ret

00000a18 <__fp_pscB>:
 a18:	00 24       	eor	r0, r0
 a1a:	0a 94       	dec	r0
 a1c:	12 16       	cp	r1, r18
 a1e:	13 06       	cpc	r1, r19
 a20:	14 06       	cpc	r1, r20
 a22:	05 06       	cpc	r0, r21
 a24:	08 95       	ret

00000a26 <__fp_round>:
 a26:	09 2e       	mov	r0, r25
 a28:	03 94       	inc	r0
 a2a:	00 0c       	add	r0, r0
 a2c:	11 f4       	brne	.+4      	; 0xa32 <__fp_round+0xc>
 a2e:	88 23       	and	r24, r24
 a30:	52 f0       	brmi	.+20     	; 0xa46 <__fp_round+0x20>
 a32:	bb 0f       	add	r27, r27
 a34:	40 f4       	brcc	.+16     	; 0xa46 <__fp_round+0x20>
 a36:	bf 2b       	or	r27, r31
 a38:	11 f4       	brne	.+4      	; 0xa3e <__fp_round+0x18>
 a3a:	60 ff       	sbrs	r22, 0
 a3c:	04 c0       	rjmp	.+8      	; 0xa46 <__fp_round+0x20>
 a3e:	6f 5f       	subi	r22, 0xFF	; 255
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	08 95       	ret

00000a48 <_exit>:
 a48:	f8 94       	cli

00000a4a <__stop_program>:
 a4a:	ff cf       	rjmp	.-2      	; 0xa4a <__stop_program>
